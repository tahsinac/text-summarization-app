import os
from textSummarizer.logging import logger
from transformers import AutoTokenizer
from datasets import load_dataset, load_from_disk
from textSummarizer.entity import DataTransformationConfig



# The DataTransformation class is used for performing data transformations.
class DataTransformation:
    def __init__(self, config: DataTransformationConfig):
        self.config = config
        self.tokenizer = AutoTokenizer.from_pretrained(config.tokenizer_name)


    
    def convert_examples_to_features(self,example_batch):
        """
        The function `convert_examples_to_features` takes an example batch as input and converts it into
        input and target encodings using a tokenizer. The input encodings are generated by tokenizing
        the dialogue with a maximum length of 1024 and truncating if necessary. The target encodings are
        generated by tokenizing the summary with a maximum length of 128 and truncating if necessary.
        The function returns a dictionary containing the input IDs, attention mask, and labels (target
        input IDs).
        
        :param example_batch: The `example_batch` parameter is a batch of examples that contains the
        dialogue and summary data. It is a dictionary-like object where the keys are the names of the
        data fields (e.g., 'dialogue', 'summary') and the values are the corresponding data for each
        example in the batch
        :return: a dictionary with three keys: 'input_ids', 'attention_mask', and 'labels'. The values
        associated with these keys are the input encodings, attention masks, and target encodings,
        respectively.
        """
        input_encodings = self.tokenizer(example_batch['dialogue'] , max_length = 1024, truncation = True )
        
        with self.tokenizer.as_target_tokenizer():
            target_encodings = self.tokenizer(example_batch['summary'], max_length = 128, truncation = True )
            
        return {
            'input_ids' : input_encodings['input_ids'],
            'attention_mask': input_encodings['attention_mask'],
            'labels': target_encodings['input_ids']
        }
    

    def convert(self):
        """
        The function converts a dataset from a disk to a different format and saves it to a specified
        directory.
        """
        dataset_samsum = load_from_disk(self.config.data_path)
        dataset_samsum_pt = dataset_samsum.map(self.convert_examples_to_features, batched = True)
        dataset_samsum_pt.save_to_disk(os.path.join(self.config.root_dir,"samsum_dataset"))